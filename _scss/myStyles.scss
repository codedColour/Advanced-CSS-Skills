/* THE CASCADE EXPLAINED
 Importance is considered first. !important | Author declartations | User declaration | then browser default declaration.

 Ususally the conflicts arise in author declarations and so the parsing moves on to Specificity.

Specificity precedence is Inline styles (which shouldn't be used) | IDs | Classes, pseudo-classes, attributes | Elements and pseudo-elements

Score as n|n|n|n where n is the number of each case that exists in a selector (e.g. nav#nav div.bold .button scores 0|1|2|2). You then work from left to right. A single inline style will outweight a dozen IDs for instance, a single ID will outweight a dozen classes, and so on.

If all have the same score then the cascade will then consider the source order and this is why you always put your stylesheet last in the HTML link.*/


/*****   RESET   *****/
*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: inherit;    
}

/*****  VARIABLES   *****/
$colour-light: #7ed56f; // light-green
$colour-medium: #55c57a; // medium-green
$colour-dark: #28b485; // dark-green
$colour-text: #777; // light grey
$colour-red: red; // red colour to test things out

/*****  MIXINS   *****/
@mixin clearfix {
    &::after {
        content: "";
        clear: both;
        display: table;
    }
}

@mixin style-link-text($colour) {
    text-transform: uppercase;
    text-decoration: none;
    font-size: 1.6rem;
    color: $colour;
}

@mixin style-button {
    display: inline-block;
    border: none; 
    border-radius: 10rem;
    padding: 1.5rem 4rem;
}

/*****  EXTENDS   *****/
%btn-placeholder {
    @include style-button;
    @include style-link-text($colour-text); 
}


/*****   GLOBALS   *****/
html {
    font-size: 62.5%; /* 10px */
}

body {
    font-family: 'Lato', sans-serif;
    font-weight: 400;
    line-height: 1.7;
    color: #777;
    padding: 3rem;
    box-sizing: border-box;
}

/*****   HEADER   *****/
.header {
    position: relative;
    height: 95vh;
    background: linear-gradient(
        to right bottom,
        rgba(126,213,111,0.8)
        ,rgba(40,180,133,0.8)), 
    url("../_images/hero.jpg");
    background-size: cover;
    background-position: top;

    -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
            clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}
.header__logo {
    height: 3.5rem;
}

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; 
}
.heading-primary {
    color: #fff;
    text-transform: uppercase; 
    margin-bottom: 6rem;

    -webkit-backface-visibility: hidden; 
            backface-visibility: hidden; /* stops shake at end of animation */
}
.heading-primary--main {
    display: block;
    font-size: 6rem;
    letter-spacing: 3.5rem;
    font-weight: 400;
    margin-left: 3.5rem;

    -webkit-animation-name: moveInLeft;
            animation-name: moveInLeft;
    -webkit-animation-duration: 1s;
            animation-duration: 1s;
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
}
.heading-primary--sub {
    display: block;
    font-size: 2rem;
    letter-spacing: 1.75rem;
    font-weight: 700;  
    margin-left: 1.75rem;

    -webkit-animation: moveInRight 1s ease-out; /* condensed version of above */
            animation: moveInRight 1s ease-out;
}

.btn:link,
.btn:visited {    
    @extend %btn-placeholder;
    
    transition: all .2s;
    position: relative; /*set so .btn::after absolute positioning works*/       
}

.btn:hover {
    transform: translateY(-.3rem);
    box-shadow: 0 1rem 2rem rgba(0,0,0,.2);
}
.btn:active {
    transform: translateY(-1px);
    /*this is in relation to the original state. This means -1px will effectively move the link down 2px as the hover state will have moved it up 3px*/

    box-shadow: 0 .5rem 1rem rgba(0,0,0,.4);
}

.btn--white {
    background-color: #fff;
    color: #777;
}
.btn--animated {
    -webkit-animation: moveInUp .5s ease-out .75s;
            animation: moveInUp .5s ease-out .75s;

    /*to stop the link from appearing and then animating we use the below property to set the initial opacity to zero*/
    -webkit-animation-fill-mode: backwards;
            animation-fill-mode: backwards;
}

.btn::after {
    /*This createsd a dummy link behind the original one. We can then apply styles to have effects on its hover state. You must always set content and display properties. CSS treats this as a child of the original (in this case.btn) and so 100% height ad width will take up the same space as that specified for the .btn.*/

    /*: is used for pseudo-selectors like hover. :: is used for pseudo-content such as before and after. :: is not supported in IE8*/
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}

.btn--white::after {
    background-color: #fff;
}

.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0
}

/*Text Box Animation*/
@-webkit-keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }
    80% {
        transform: translateX(1rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}
        @keyframes moveInLeft {
            0% {
                opacity: 0;
                transform: translateX(-10rem);
            }
            80% {
                transform: translateX(1rem);
            }
            100% {
                opacity: 1;
                transform: translate(0);
            }
        }
@-webkit-keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    80% {
        transform: translateX(-1rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}
        @keyframes moveInRight {
            0% {
                opacity: 0;
                transform: translateX(10rem);
            }
            80% {
                transform: translateX(-1rem);
            }
            100% {
                opacity: 1;
                transform: translate(0);
            }
        }
@-webkit-keyframes moveInUp {
    0% {
        opacity: 0;
        transform: translateY(3rem);    
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}
        @keyframes moveInUp {
            0% {
                opacity: 0;
                transform: translateY(3rem);    
            }
            100% {
                opacity: 1;
                transform: translate(0);
            }
        }






